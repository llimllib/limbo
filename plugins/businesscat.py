"""Business cat is summoned when business jargon is used"""
from __future__ import print_function
import re
import random

triggers = [
  "action item(|s)",
  "adult in the room",
  "all hands on deck",
  "at the end of the day",
  "best (of breed|practice)",
  "big(|ger) (picture|data)",
  "bleeding edge",
  "blue (ocean strategy|sky thinking)",
  "boil the ocean",
  "bottom line",
  "brain dump",
  "brainstorm(|ing)",
  "burn platform",
  "burn rate",
  "business value",
  "(\\W|^)buy(\\s|-)in",
  "care and feeding",
  "change (agent|management)",
  "circle the wagons",
  "client(\\s|-)facing",
  "come to jesus moment",
  "content marketing",
  "core competenc(y|ies)",
  "core values",
  "corporate values",
  "customer centric",
  "deliverable",
  "do more with less",
  "(double|drill)(\\s|-|)down",
  "drinking the kool(\\s|-)aid",
  "ducks in a row",
  "elevator pitch",
  "emotional bandwidth",
  "eye on the ball",
  "fast track",
  "game(\\s|)plan",
  "gap analysis",
  "get on the same page",
  "giving 110",
  "go(|ing) (forward|the extra mile)",
  "guru",
  "hammer(|ing) away",
  "hard stop",
  "hit the ground running",
  "hold the fort",
  "ideat(e|ion)",
  "it is what it is",
  "key takeaway(|s)",
  "learnings",
  "leverage",
  "lots of moving parts",
  "low hanging fruit",
  "make hay",
  "move (the goal posts|the needle)",
  "net( |-)net",
  "north(\\s|-)south",
  "on (my|your) plate",
  "on (my|your) radar",
  "onboarding",
  "out of (pocket|the loop)",
  "out(side|\\sof) the box",
  "over the wall",
  "paradigm",
  "peel the onion",
  "(\\W|^)per se(\\W|$)",
  "pilot (program|project)",
  "pipeline",
  "(\\W|^)ping me(\\W|$)",
  "point of contact",
  "price point",
  "proactive",
  "punch a puppy",
  "put this one to bed",
  "reach out",
  "return on investment",
  "ROI",
  "results driven",
  "robust",
  "rock star",
  "rubber (hits|meets) the road",
  "share of wallet",
  "solutioning",
  "strategic .*?",
  "streamline",
  "swim lane",
  "synerg(y|ize)",
  "take it (offline|to the next level)",
  "take ownership",
  "takeaway",
  "team (building|player)",
  "thought leadership",
  "tiger teams",
  "topicjacking",
  "total quality",
  "touch(|ing) (base|points)",
  "value (add|proposition)",
  "verb(iage|age)"
]

images = [
  "http://i.imgur.com/0C5hbEn.jpg",
  "http://i.imgur.com/3cCagym.jpg",
  "http://i.imgur.com/69xwU1q.jpg",
  "http://i.imgur.com/74SCEZx.jpg",
  "http://i.imgur.com/8WsH50B.jpg",
  "http://i.imgur.com/9a8GfA1.jpg",
  "http://i.imgur.com/9dNlOik.jpg",
  "http://i.imgur.com/9KDeH5Y.jpg",
  "http://i.imgur.com/9T3rKvL.jpg",
  "http://i.imgur.com/AEmIduX.jpg",
  "http://i.imgur.com/aP3pDrD.jpg",
  "http://i.imgur.com/aPrc9au.jpg",
  "http://i.imgur.com/Ar6w6qD.jpg",
  "http://i.imgur.com/BDroxfl.jpg",
  "http://i.imgur.com/BFLs06k.jpg",
  "http://i.imgur.com/CRqMjBp.jpg",
  "http://i.imgur.com/CS0SHo9.jpg",
  "http://i.imgur.com/cvu5T4Q.jpg",
  "http://i.imgur.com/DgG3CJD.jpg",
  "http://i.imgur.com/DgmFNr3.jpg",
  "http://i.imgur.com/DHrSBHy.jpg",
  "http://i.imgur.com/e4BsPLu.jpg",
  "http://i.imgur.com/F3w78c4.jpg",
  "http://i.imgur.com/fbhidqE.jpg",
  "http://i.imgur.com/gE8hR2x.jpg",
  "http://i.imgur.com/GJj4MmB.jpg",
  "http://i.imgur.com/HNp4TtH.jpg",
  "http://i.imgur.com/iorRW0P.jpg",
  "http://i.imgur.com/L1A2Esf.jpg",
  "http://i.imgur.com/l54I3pu.jpg",
  "http://i.imgur.com/ncvO5Nl.jpg",
  "http://i.imgur.com/notrUfL.jpg",
  "http://i.imgur.com/O9XM42Z.jpg",
  "http://i.imgur.com/olBGWkq.jpg",
  "http://i.imgur.com/PaGjotI.jpg",
  "http://i.imgur.com/QyCmPGg.jpg",
  "http://i.imgur.com/QzgJGlz.jpg",
  "http://i.imgur.com/ret6i1P.jpg",
  "http://i.imgur.com/srAssQa.jpg",
  "http://i.imgur.com/SW8mlDE.jpg",
  "http://i.imgur.com/T8lJliS.jpg",
  "http://i.imgur.com/tMYclqT.jpg",
  "http://i.imgur.com/TyGdG1m.jpg",
  "http://i.imgur.com/UKjObcM.jpg",
  "http://i.imgur.com/vARRxc7.jpg",
  "http://i.imgur.com/w0wuthi.jpg",
  "http://i.imgur.com/X6XF5OW.jpg",
  "http://i.imgur.com/xTBxH96.jpg",
  "http://i.imgur.com/zkNR93k.jpg",
  "http://i.imgur.com/ZKUuLFp.jpg"
]

# https://stackoverflow.com/questions/6750240/how-to-do-re-compile-with-a-list-in-python

def on_message(msg, server):
    text = msg.get("text", "")
    match = re.match('|'.join(triggers), text)
    if not match: return

    return random.choice(images)
